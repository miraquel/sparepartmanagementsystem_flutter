import 'package:sparepartmanagementsystem_flutter/Helper/date_time_helper.dart';
import 'package:sparepartmanagementsystem_flutter/Model/Enums/product_type.dart';
import 'package:sparepartmanagementsystem_flutter/src/features/goods_receipt/domain/entity/goods_receipt_line_entity.dart';

class GoodsReceiptLineModel extends GoodsReceiptLineEntity {
  GoodsReceiptLineModel({
    super.goodsReceiptLineId,
    super.goodsReceiptHeaderId,
    super.itemId,
    super.lineNumber,
    super.itemName,
    super.productType,
    super.remainPurchPhysical,
    super.receiveNow,
    super.purchQty,
    super.purchUnit,
    super.purchPrice,
    super.lineAmount,
    super.inventLocationId,
    super.wMSLocationId,
    super.inventBatchId,
    super.trackingDimensionGroupName,
    super.createdBy,
    super.createdDateTime,
    super.modifiedBy,
    super.modifiedDateTime,
  });

  factory GoodsReceiptLineModel.fromJson(Map<String, dynamic> json) => GoodsReceiptLineModel(
    goodsReceiptLineId: json['goodsReceiptLineId'] as int? ?? 0,
    goodsReceiptHeaderId: json['goodsReceiptHeaderId'] as int? ?? 0,
    itemId: json['itemId'] as String? ?? '',
    lineNumber: json['lineNumber'] as int? ?? 0,
    itemName: json['itemName'] as String? ?? '',
    productType: ProductType.values[json['productType'] as int? ?? 0],
    remainPurchPhysical: json['remainPurchPhysical'] as double? ?? 0,
    receiveNow: json['receiveNow'] as double? ?? 0,
    purchQty: json['purchQty'] as double? ?? 0,
    purchUnit: json['purchUnit'] as String? ?? '',
    purchPrice: json['purchPrice'] as double? ?? 0,
    lineAmount: json['lineAmount'] as double? ?? 0,
    inventLocationId: json['inventLocationId'] as String? ?? '',
    wMSLocationId: json['wmsLocationId'] as String? ?? '',
    inventBatchId: json['inventBatchId'] as String? ?? '',
    trackingDimensionGroupName: json['trackingDimensionGroupName'] as String? ?? '',
    createdBy: json['createdBy'] as String? ?? '',
    createdDateTime: DateTime.tryParse(json['createdDateTime'] as String? ?? '') ?? DateTimeHelper.minDateTime,
    modifiedBy: json['modifiedBy'] as String? ?? '',
    modifiedDateTime: DateTime.tryParse(json['modifiedDateTime'] as String? ?? '') ?? DateTimeHelper.minDateTime,
  );

  Map<String, dynamic> toJson() => {
    if (goodsReceiptLineId > 0) 'goodsReceiptLineId': goodsReceiptLineId,
    if (goodsReceiptHeaderId > 0) 'goodsReceiptHeaderId': goodsReceiptHeaderId,
    if (itemId.isNotEmpty) 'itemId': itemId,
    if (lineNumber > 0) 'lineNumber': lineNumber,
    if (itemName.isNotEmpty) 'itemName': itemName,
    if (productType != ProductType.none) 'productType': productType.index,
    if (remainPurchPhysical > 0) 'remainPurchPhysical': remainPurchPhysical,
    if (receiveNow > 0) 'receiveNow': receiveNow,
    if (purchQty > 0) 'purchQty': purchQty,
    if (purchUnit.isNotEmpty) 'purchUnit': purchUnit,
    if (purchPrice > 0) 'purchPrice': purchPrice,
    if (lineAmount > 0) 'lineAmount': lineAmount,
    if (inventLocationId.isNotEmpty) 'inventLocationId': inventLocationId,
    if (wMSLocationId.isNotEmpty) 'wmsLocationId': wMSLocationId,
    if (inventBatchId.isNotEmpty) 'inventBatchId': inventBatchId,
    if (trackingDimensionGroupName.isNotEmpty) 'trackingDimensionGroupName': trackingDimensionGroupName,
    if (createdBy.isNotEmpty) 'createdBy': createdBy,
    if (createdDateTime.isAfter(DateTimeHelper.minDateTime)) 'createdDateTime': createdDateTime.toIso8601String(),
    if (modifiedBy.isNotEmpty) 'modifiedBy': modifiedBy,
    if (modifiedDateTime.isAfter(DateTimeHelper.minDateTime)) 'modifiedDateTime': modifiedDateTime.toIso8601String(),
  };

  factory GoodsReceiptLineModel.fromEntity(GoodsReceiptLineEntity entity) => GoodsReceiptLineModel(
    goodsReceiptLineId: entity.goodsReceiptLineId,
    goodsReceiptHeaderId: entity.goodsReceiptHeaderId,
    itemId: entity.itemId,
    lineNumber: entity.lineNumber,
    itemName: entity.itemName,
    productType: entity.productType,
    remainPurchPhysical: entity.remainPurchPhysical,
    receiveNow: entity.receiveNow,
    purchQty: entity.purchQty,
    purchUnit: entity.purchUnit,
    purchPrice: entity.purchPrice,
    lineAmount: entity.lineAmount,
    inventLocationId: entity.inventLocationId,
    wMSLocationId: entity.wMSLocationId,
    inventBatchId: entity.inventBatchId,
    trackingDimensionGroupName: entity.trackingDimensionGroupName,
    createdBy: entity.createdBy,
    createdDateTime: entity.createdDateTime,
    modifiedBy: entity.modifiedBy,
    modifiedDateTime: entity.modifiedDateTime,
  );
}